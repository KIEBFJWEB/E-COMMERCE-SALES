#BASIC TO ADVANCE QUESTIONS 

-- 1 How many orders are there in the dataset? 
SELECT 
    COUNT(*)
FROM
    order_details;

-- 2 What are the different categories of products available? 
SELECT 
    CATEGORY
FROM
    order_details
GROUP BY 1; 


-- 3 Calculate the total quantity of products sold across all orders? 
SELECT 
    SUM(QUANTITY) AS TOTAL_QUANTITY
FROM
    order_details;

-- 4 How much total revenue has been generated from all orders? 
SELECT 
    SUM(AMOUNT) AS TOTAL_REVENUE
FROM
    order_details;

-- 5 Calculate the average quantity per order  ? 
SELECT 
    ROUND(AVG(QUANTITY), 1) AS AVERGAR_QUANTITY
FROM
    order_details;
    
-- 6 Calculate the total price of sub category? 
SELECT 
    SUB_CATEGORY AS PRODUCT, SUM(AMOUNT) AS Price
FROM
    order_details
GROUP BY 1;

-- 7 Find the total sales amount and total profit generated from each category.
SELECT 
    CATEGORY, SUM(AMOUNT) AS SALES_AMOUNT, SUM(PROFIT) AS PROFIT
FROM
    order_details
GROUP BY CATEGORY;

-- 8 Which month has the highest sales target for each category?
SELECT 
    MONTH_OF_ORDER_DATE AS MONTH,
    CATEGORY,
    MAX(TARGET) AS MAX_TARGET
FROM
    sales_target
GROUP BY CATEGORY , MONTH_OF_ORDER_DATE
ORDER BY 3 DESC;

-- 9 List the top 5 cities with the highest number of orders.
SELECT CITY, COUNT(*) AS TOTAL_ORDER FROM list_of_orders 
GROUP BY 1
ORDER BY 2 DESC 
LIMIT 5;

-- 10 Calculate the average profit per order.
SELECT 
    ROUND(AVG(PROFIT), 2) AS AVG_PROFIT_PER_ORDER
FROM
    order_details;

-- 11 Find the total number of orders placed by each customer.
SELECT 
    CUSTOMER_NAME, COUNT(ORDER_ID) AS TOTAL_ORDER
FROM list_of_orders
GROUP BY 1;

-- 12 Find the TOP 5 customers based on Total orders.
SELECT 
    L.CUSTOMER_NAME, COUNT(O.ORDER_ID) AS TOTAL_ORDER
FROM
    list_of_orders L
        JOIN
    order_details O ON L.ORDER_ID = L.ORDER_ID
GROUP BY 1
ORDER BY 2 DESC
LIMIT 5;
-- 13 Compare the target and actual revenue for each month.

SELECT O.CATEGORY,S.MONTH_OF_ORDER_DATE,SUM(O.AMOUNT) AS ACTUAL_REVENUE,
SUM(S.TARGET) OVER (partition by O.CATEGORY) AS ACTUAL_TARGET,S.TARGET AS FLSE FROM order_details O 
LEFT JOIN sales_target S ON O.CATEGORY = S.CATEGORY
GROUP BY 1,2,S.TARGET
order by 3;

-- 14 Identify the sub-category with the highest quantity sold in each category.
SELECT CATEGORY,SUB_CATEGORY,SUM(QUANTITY) AS TOTAL_QUANTITY FROM order_details
GROUP BY 1,2
ORDER BY 3 DESC ;

-- 15 Identify the Sub_category where the sales anount higher than sales target.
SELECT ST.MONTH_OF_ORDER_DATE AS MONTH,OD.SUB_CATEGORY,ST.TARGET,SUM(AMOUNT) AS AMOUNT FROM sales_target ST
RIGHT JOIN order_details OD ON OD.CATEGORY = ST.CATEGORY
GROUP BY 1,2,3
HAVING ST.TARGET < AMOUNT;


-- 16 Find the customer who has spent the most in total
SELECT L.CUSTOMER_NAME, SUM(O.AMOUNT) AS TOTAL_SPENT FROM list_of_orders L
LEFT JOIN order_details O ON L.ORDER_ID = O.ORDER_ID
GROUP BY 1
ORDER BY TOTAL_SPENT DESC LIMIT 1;

-- 17 Write a query to find the top 3 orders with the highest profit in each category.
SELECT CATEGORY, ORDER_ID, PROFIT
   FROM (
       SELECT CATEGORY, ORDER_ID, PROFIT,
           ROW_NUMBER() OVER (PARTITION BY CATEGORY ORDER BY PROFIT DESC) AS RNK
       FROM ORDER_DETAILS
   ) AS ranked_orders
   order by profit desc limit 3;
   
   -- 18 Identify the top 5 performing state in terms of profit and quantity sold.**
 SELECT L.STATE,SUM(O.PROFIT) AS PROFIT, SUM(O.QUANTITY) AS QUANTITY FROM order_details O
 RIGHT JOIN list_of_orders L ON O.ORDER_ID = L.ORDER_ID
 GROUP BY L.STATE
 ORDER BY QUANTITY DESC 
 LIMIT 5;
 
-- 19 Calculate the total sales, total profit, and average quantity sold for each sub-category in each month.
SELECT 
    O.SUB_CATEGORY,
    S.MONTH_OF_ORDER_DATE  AS MONTH,
    SUM(O.AMOUNT) AS TOTAL_SALES,
    SUM(O.PROFIT) AS PROFIT,
    ROUND(AVG(O.QUANTITY), 0) AS AVG_QUANTITY
FROM
    order_details O 
    LEFT JOIN sales_target S ON O.CATEGORY = S.CATEGORY
GROUP BY SUB_CATEGORY, MONTH;

 -- USING WINDOW FUNCTION
-- 20 Find the running total of sales amounts for each category.**
  SELECT ORDER_ID,CATEGORY,AMOUNT, SUM(AMOUNT)
  OVER (PARTITION BY CATEGORY ORDER BY ORDER_ID ) AS RUNNING_SALES
  FROM order_details 
  ORDER BY AMOUNT DESC;
  
-- 21 Calculate the average profit for each category and display it alongside each order.
SELECT ORDER_ID, CATEGORY,PROFIT,AVG(PROFIT)
OVER (partition by CATEGORY) AS AVG_PROFIT  FROM order_details  
ORDER BY PROFIT DESC;

-- 22 Rank the orders by profit within each category.**
   SELECT ORDER_ID,CATEGORY,PROFIT, 
   RANK() OVER (PARTITION BY CATEGORY ORDER BY PROFIT DESC) AS PROFIT_RANK
   FROM order_details;
   
-- 23 Get the cumulative quantity sold for each sub-category within each category.
   SELECT ORDER_ID,CATEGORY,SUB_CATEGORY,QUANTITY,SUM(QUANTITY)
   OVER (PARTITION BY CATEGORY,SUB_CATEGORY ORDER BY ORDER_ID) AS CUM_QUANTITY  
   FROM order_details
   ORDER BY CATEGORY,SUB_CATEGORY;
  
 -- 24 Identify the top 3 profitable orders in each category with customer name.
   SELECT O.ORDER_ID,L.CUSTOMER_NAME,L.STATE,O.SUB_CATEGORY,SUM(O.PROFIT)
   OVER (PARTITION BY O.SUB_CATEGORY ORDER BY O.PROFIT) AS HIGHEST_PROFIT
   FROM order_details O JOIN list_of_orders L ON O.ORDER_ID = L.ORDER_ID
   ORDER BY PROFIT DESC LIMIT 3;
  
-- 25 Calculate the highest percentage of total sales for each order compared to the total sales in its SUB_category.
SELECT 
    O.ORDER_ID,L.CUSTOMER_NAME,O.CATEGORY,O.SUB_CATEGORY, O.AMOUNT,
ROUND((O.AMOUNT/SUM(O.AMOUNT) OVER (PARTITION BY O.CATEGORY,O.SUB_CATEGORY)) * 100,2 )AS PERCENTAGE_OF_TOTAL_SALES 
FROM
    order_details O 
    JOIN list_of_orders L ON
    O. ORDER_ID = L.ORDER_ID
    ORDER BY PERCENTAGE_OF_TOTAL_SALES DESC;

-- USING CTE     
-- 26 Write a query to calculate the total profit for each category from the order_details table using a CTE.
    WITH CTE AS 
    (SELECT CATEGORY,SUM(PROFIT) FROM order_details
    GROUP BY CATEGORY)
SELECT * FROM CTE;

-- 27 Write a query to find the categories that have exceeded their sales target using the sales_target and 
-- order_details tables.
WITH CS AS 
(SELECT CATEGORY,SUB_CATEGORY,sum(AMOUNT) AS TOTALSALES FROM order_details O
group by CATEGORY,SUB_CATEGORY)
SELECT ST.CATEGORY,CS.SUB_CATEGORY,ST.TARGET,TOTALSALES FROM sales_target ST    
JOIN CS ON ST.CATEGORY = CS.CATEGORY
WHERE CS.TOTALSALES>ST.TARGET;

-- 28 Write a query to count the total number of orders per state and city using a CTE.
WITH CTE AS 
(SELECT STATE,CITY,COUNT(ORDER_ID) AS ORDERS FROM list_of_orders
GROUP BY 1,2)
SELECT * FROM CTE;

-- 29 Write a query to calculate the average profit for each sub-category within a category using a CTE.
WITH AVG_PROFIT AS 
(SELECT 
CATEGORY, SUB_CATEGORY, ROUND(AVG(PROFIT),2) AS AVG_PROFIT
FROM order_details 
GROUP BY 1,2)
SELECT * FROM AVG_PROFIT
ORDER BY AVG_PROFIT DESC;

-- 30 Write a query to find the top 5 cities that generated the highest sales amount.

WITH CITY_SALES AS 
(SELECT O.ORDER_ID,L.CUSTOMER_NAME,L.STATE,L.CITY,SUM(O.AMOUNT) AS AMOUNT FROM list_of_orders L
JOIN order_details O ON L.ORDER_ID = O.ORDER_ID
GROUP BY L.CUSTOMER_NAME,L.CITY,L.STATE,O.ORDER_ID)
SELECT * FROM CITY_SALES
ORDER BY AMOUNT DESC;  
